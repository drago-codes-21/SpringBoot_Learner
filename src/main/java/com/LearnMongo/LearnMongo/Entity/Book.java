package com.LearnMongo.LearnMongo.Entity;

import lombok.*;
import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

// @Document annotation in Spring Data is used to indicate that a class is a domain object that should be persisted to a database, typically in MongoDB.
// It marks a class as a document that will be stored in a specific collection.
//Collection Mapping: The @Document annotation allows you to specify the name of the MongoDB collection that the document will be stored in. If you don't specify a name, it defaults to the class name in lowercase.
//Mapping to Fields: It helps in mapping the fields of the class to the corresponding fields in the MongoDB document.
//Custom Identifiers: You can specify custom identifiers for the document using the @Id annotation within the class.
//############################################
// @Data This annotation is a part of Lombok library,
// it provides getters, setters, toString(), equals(), all args constructor

@Document(collection = "Book")
@Data
@NoArgsConstructor
public class Book {

    //Unique Identifier: The field annotated with @Id will be treated as the primary key, ensuring that each document in the collection has a unique identifier.
    //Automatic Generation: If the identifier field is of type String, it can be set manually. For types like ObjectId, it can be automatically generated by MongoDB.
    //Compatibility with Repositories: Spring Data automatically handles CRUD operations based on the field marked with @Id, making it easier to manage data.
    @Id
    private ObjectId id;
    @NonNull
    private String title;
    private String content;
}
